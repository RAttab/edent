#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname edent debug verbose


-record(config, {
        debug = false :: boolean(),
        output = undefined :: undefined | string(),
        inputs = [] :: list(string())
    }).

-record(state, {
        debug = false :: boolean(),
        indent = 0 :: pos_integer(),
        type = false :: false | clause | spec,
        stack = [] :: list(atom())
    }).

debug(#state{ debug = false}, _) ->
    ok;
debug(_, Term) ->
    erlang:display(Term).

print(#state{ debug = false}, _) ->
    ok;
print(_, Term) ->
    io:format(Term).


main(Args) ->
    indent(config(Args)),
    halt(0).


config(Args) ->
    config(Args, #config{}).

config([], #config{ output = Output, inputs = Inputs } = Config) when
    (Output == undefined andalso length(Inputs) > 0) orelse
    (Output =/= undefined andalso length(Inputs) == 1)
->
    Config;
config(["-v" | Rest], Config) ->
    config(Rest, Config#config{ debug = true });
config(["-o", Output, Input], Config) ->
    Config#config{ output = Output, inputs = [Input] };
config(Inputs, Config) ->
    Config#config{ inputs = Inputs };
config(_, _) ->
    io:fwrite(standard_error,
        "usage: edent [-v] <input>...~n"
        "       edent [-v] -o <output> <input>~n", []),
    halt(1).

indent(#config{ debug = Debug, output = undefined, inputs = Inputs }) ->
    lists:map(fun (File) -> indent(File, File, Debug) end, Inputs);
indent(#config{ debug = Debug, output = Output, inputs = [Input] }) ->
    indent(Input, Output, Debug).

indent(Input, Output, Debug) ->
    erlang:display({indent, Input, Output}),
    {ok, Data} = file:read_file(Input),
    {Body, Header} = escript_fix(Data),
    {ok, Tokens, _} = erl_scan:string(binary_to_list(Body), 0, [return]),
    ok = file:write_file(Output, [Header, process(Tokens, Body, #state{ debug = Debug })]).


skip_line(<<$\n, Rest/binary>>, Acc) ->
    {Rest, lists:reverse([$\n | Acc])};
skip_line(<<C, Rest/binary>>, Acc) ->
    skip_line(Rest, [C | Acc]);
skip_line(<<>>, Acc) ->
    {<<>>, lists:reverse(Acc)}.


escript_fix(<<$#, $!, Rest/binary>>) ->
    skip_line(Rest, [$!, $#]);
escript_fix(Bin) ->
    {Bin, ""}.

process(Tokens, Bin, State) ->
    process(Tokens, Bin, [], State).

process([], _, Output, _) ->
    lists:reverse(Output);
process(Tokens, Binary, Output, State) ->
    debug(State, '------------------------------------------------------------------------------------------------'),

    {LineTok, RestTok, Count} = next_line_tok(Tokens),
    debug(State, {line, tokens, Count, LineTok}),

    {LineBin, RestBin} = next_line_bin(Binary, Count),
    LineFmt = format_line(LineTok, LineBin, State),
    print(State, iolist_to_binary(LineFmt)),

    NextState = lists:foldl(
            fun (Token, StateStep) ->
                    debug(StateStep, {step, Token, StateStep}),
                    state(Token, StateStep)
            end, State, LineTok),

    debug(State, {final, NextState}),
    process(RestTok, RestBin, [LineFmt | Output], NextState).


next_line_bin(Data, eof) ->
    Data;
next_line_bin(Data, Count) ->
    next_line_bin(Data, <<>>, Count).

next_line_bin(<<>>, Acc, 1) ->
    {Acc, <<>>};
next_line_bin(Rest, Acc, 0) ->
    {Acc, Rest};
next_line_bin(<<$\n, Rest/binary>>, Acc, Count) ->
    next_line_bin(Rest, <<Acc/binary, $\n>>, Count - 1);
next_line_bin(<<C, Rest/binary>>, Acc, Count) ->
    next_line_bin(Rest, <<Acc/binary, C>>, Count).


next_line_tok([]) ->
    {[], [], 0};
next_line_tok([Token | _] = Tokens) ->
    Start = erl_scan:line(Token),
    {Line, Rest, Loc} = next_line_tok(Tokens, []),
    Count = case Loc of
            End -> End - Start + 1;
            eof -> eof
        end,
    {Line, Rest, Count}.


%% The erl_scan eats a \n character if it follows a dot character BUT
%% not if if there's a space or basically anything in between the two
%% characters.
%%
%% TODO: The only way to fix this is to remove all trailing spaces
%% before sending the text to erl_scan.
next_line_tok([{dot, Loc} | Rest], Acc) ->
    {lists:reverse([dot | Acc]), Rest, Loc};
next_line_tok([{white_space, Loc, Text} | Rest], Acc) ->
    case lists:splitwith(fun (C) -> C /= $\n end, Text) of
        {_, []} -> next_line_tok(Rest, [{white_space, Text} | Acc]);
        {_, [$\n | Tail]} -> {lists:reverse(Acc), [{white_space, Loc + 1, Tail} | Rest], Loc}
    end;
next_line_tok([], Acc) ->
    {lists:reverse(Acc), [], eof};
next_line_tok([{Cat, _, Value} | Rest], Acc) ->
    next_line_tok(Rest, [{Cat, Value} | Acc]);
next_line_tok([{Cat, _} | Rest], Acc) ->
    next_line_tok(Rest, [Cat | Acc]).


format_line(Tokens, Binary, State) ->
    case trimr(trim(Binary)) of
        <<$\n>> -> <<$\n>>;
        Trimmed ->
            Indent = line_indent(first_tok(Tokens), State),
            [lists:duplicate(Indent * 4, $\s), Trimmed]
    end.


first_tok([]) -> none;
first_tok([{white_space, _} | Rest]) -> first_tok(Rest);
first_tok([Token | _]) -> Token.


trim(<<>>) -> <<>>;
trim(<<$\s, Rest/binary>>) -> trim(Rest);
trim(<<$\t, Rest/binary>>) -> trim(Rest);
trim(Binary) -> Binary.

trimr(<<>>) -> <<$\n>>;
trimr(Binary)  ->
    ToTrim = case bin_reverse(Binary) of
            <<$\n, Rest/binary>> -> Rest;
            Data -> Data
        end,
    bin_reverse(<<$\n, (trim(ToTrim))/binary>>).

bin_reverse(Binary) ->
    bin_reverse(Binary, <<>>).

bin_reverse(<<>>, Acc) ->
    Acc;
bin_reverse(<<C, Rest/binary>>, Acc) ->
    bin_reverse(Rest, <<C, Acc/binary>>).


line_indent(Token, #state{ stack = [{expr, _, _} | Stack] } = State) ->
    line_indent(Token, State#state{ stack = Stack });

line_indent(')', #state{ stack = [{block, Indent, 'fun'} | _], type = clause }) ->
    Indent;
line_indent(')', #state{ stack = [{block, Indent, 'fun'} | _], type = spec }) ->
    Indent;
line_indent(')', #state{ stack = [{'(', Indent} | _] }) ->
    Indent;
line_indent(')' = Token, State) ->
    throw({unmatched, Token, State});

line_indent('}', #state{ stack = [{'{', Indent} | _] }) ->
    Indent;
line_indent('}' = Token, State) ->
    throw({unmatched, Token, State});

line_indent(']', #state{ stack = [{'[', Indent} | _] }) ->
    Indent;
line_indent(']' = Token, State) ->
    throw({unmatched, Token, State});

line_indent('>>', #state{ stack = [{'<<', Indent} | _] }) ->
    Indent;
line_indent('>>' = Token, State) ->
    throw({unmatched, Token, State});

line_indent('|', #state{ stack = [{'[', Indent} | _] }) ->
    Indent;
line_indent('||', #state{ stack = [{'[', Indent} | _] }) ->
    Indent;
line_indent('<-', #state{ stack = [{'[', Indent} | _] }) ->
    Indent + 1;
line_indent('=>', #state{ stack = [{'{', Indent} | _] }) ->
    Indent + 1;
line_indent('::', #state{ stack = [{'(', Indent} | _] }) ->
    Indent + 1;
line_indent('::', #state{ stack = [{'{', Indent} | _] }) ->
    Indent + 1;
line_indent('->', #state{ stack = [{block, Indent, 'if'} | _] }) ->
    Indent + 1;
line_indent('->', #state{ stack = [{block, Indent, 'try'} | _] }) ->
    Indent + 1;
line_indent('->', #state{ stack = [{block, Indent, 'case'} | _] }) ->
    Indent + 1;
line_indent('->', #state{ stack = [{block, Indent, 'receive'} | _] }) ->
    Indent + 1;
line_indent('->', #state{ stack = [{block, Indent, 'when'} | _] }) ->
    Indent;
line_indent('when', #state{ stack = [macro] }) ->
    0;
line_indent('when', #state{ stack = [{block, Indent, 'fun'} | _] }) ->
    Indent + 1;
line_indent('catch', #state{ stack = [{block, Indent, 'try'} | _] }) ->
    Indent;

line_indent('of', #state{ stack = [{block, Indent, 'case'} | _] }) ->
    Indent;
line_indent('of', #state{ stack = [{block, Indent, 'try'} | _] }) ->
    Indent;
line_indent('of' = Token, State) ->
    throw({unmatched, Token, State});

line_indent('after', #state{ stack = [{block, Indent, 'receive'} | _] }) ->
    Indent;
line_indent('after', #state{ stack = [{block, Indent, 'try'} | _] }) ->
    Indent;
line_indent('after'= Token, State) ->
    throw({unmatched, Token, State});

line_indent('end', #state{ stack = [{block, Indent, _} | _] }) ->
    Indent;
line_indent('end' = Token, State) ->
    throw({unmatched, Token, State});

% We expect a different behaviour from these two then other regular
% closing indent.
line_indent(';', #state{ indent = Indent }) ->
    Indent;
line_indent(dot, #state{ indent = Indent }) ->
    Indent;

line_indent(_, #state{ indent = Indent }) ->
    Indent.

close_type(#state{ type = false }) ->
    false;
close_type(#state{ type = clause, stack = [{expr, _, '::'} | _] }) ->
    false;
close_type(#state{ type = Type }) ->
    Type.

%% Denominates a macro
state('-', #state{ indent = 0, stack = [] } = State) ->
    State#state{ stack = [{expect, spec}, macro] };
state({atom, spec}, #state{ stack = [{expect, spec} | Stack] } = State) ->
    State#state{ type = spec, stack = Stack };
state(Token, #state{ stack = [{expect, spec} | Stack] } = State) ->
    state(Token, State#state{ stack = Stack });

state(dot = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state(';' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state(',' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state(')' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('}' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state(']' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('>>' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('::' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('||' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('<-' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('->' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('=>' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('of' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('end' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('after' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});
state('catch' = Token, #state { stack = [{expr, Indent, _} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack, type = close_type(State)});


%% the `fun` keyword denominates the start of one of 3 variants:
%%
%% 1) lambda:    `fun (X) -> ok; (_) -> ok end`
%% 2) reference: `fun my_fun/1`
%% 3) type:      `fun((any()) -> any())`
%%
%% The lambda variant (1)x is straight forward it behaves like any
%% other regular block and it has an `end` token that we can use to
%% terminate it.
%%
%% Variant (2)  is not  an indent block  and therefore  doesn't really
%% cause any indent changes. The only  real way to detect this variant
%% is to know  whether a `(` token follows the  `fun` token. If that's
%% not the  case then we're  in variant (2).  To make that  happen, we
%% push an  `{expect, '('}` entry  on top  of the `{block,  _, 'fun'}`
%% entry  on the  stack such  that  if the  next non-whitespace  token
%% happens to be a `(` token then we know we're in variant (1), and we
%% can  keep the  `{block, _,  'fun'}` entry  on the  stack. Otherwise
%% we're in variant (2) and we get rid of the block entry.
%%
%% Confused yet? But wait there's more...
%%
%% Variant (3) has actually two `(` tokens after the `fun` token and
%% is ambiguous with our previous detection mechanism. But this
%% variant only exists if we're defining a type. This is where the
%% `type` entry in `#state` comes in handy. If we know that we're in a
%% type definition, then if we run into a `(` token while `{expect,
%% '('}` is at the top of our stack then we just merge the block for
%% `(` with the block for `fun` such that the matching `)` will now
%% close the `fun` block.
%%
%% I like erlang syntax...

state('(' = Token, #state{ type = false, stack = [{expect, Token} | Stack] } = State) ->
    state(Token, State#state{ stack = Stack });
state('(' = Token, #state{ stack = [{expect, Token} | Stack] } = State) ->
    State#state{ stack = Stack };
state({white_space, _}, #state{ stack = [{expect, _} | _] } = State) ->
    State;
state(Token, #state{ stack = [{expect, '('}, {block, Indent, 'fun'} | Stack] } = State) ->
    state(Token, State#state{ indent = Indent, stack = Stack });
state('fun' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{expect, '('}, {block, Indent, Token} | Stack] };


state('=', #state{ indent = Indent, stack = [{expr, _, _} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state('=' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{expr, Indent, Token} | Stack] };

state('<-', #state{ indent = Indent, stack = [{expr, _, _} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state('<-' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{expr, Indent, Token} | Stack] };

state('!', #state{ indent = Indent, stack = [{expr, _, _} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state('!' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{expr, Indent, Token} | Stack] };

state('::' = Token, #state{ indent = Indent, type = spec, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{expr, Indent, Token} | Stack] };
state('::' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{expr, Indent, Token} | Stack], type = clause };

state('(' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{Token, Indent} | Stack] };
state(')', #state{ stack = [{block, Indent, 'fun'} | Stack], type = clause } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state(')', #state{ stack = [{block, Indent, 'fun'} | Stack], type = spec } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state(')', #state{ stack = [{'(', Indent} | Stack] } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state(')' = Token, State) ->
    throw({unmatched, Token, State});

state('[' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{Token, Indent} | Stack] };
state(']', #state{ stack = [{'[', Indent} | Stack] } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state(']' = Token, State) ->
    throw({unmatched, Token, State});

state('<<' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{Token, Indent} | Stack] };
state('>>', #state{ stack = [{'<<', Indent} | Stack] } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state('>>' = Token, State) ->
    throw({unmatched, Token, State});

state('{' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{Token, Indent} | Stack] };
state('}', #state{ stack = [{'{', Indent} | Stack] } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state('}' = Token, State) ->
    throw({unmatched, Token, State});

state('if' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, Indent, Token} | Stack] };
state('try' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, Indent, Token} | Stack] };
state('case' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, Indent, Token} | Stack] };
state('begin' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, Indent, Token} | Stack] };
state('receive' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, Indent, Token} | Stack] };

state('when', #state{ stack = [macro]} = State) ->
    State;
state('when' = Token, #state{ stack = [{block, Indent, 'fun'}] = Stack} = State) ->
    State#state{ indent = Indent + 2, stack = [{block, Indent + 1, Token} | Stack] };
state('when' = Token, #state{ indent = Indent, stack = Stack } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, Indent, Token} | Stack] };

state('of', #state{ stack = [{block, Indent, 'case'} | _]} = State) ->
    State#state{ indent = Indent + 1};
state('of', #state{ stack = [{block, Indent, 'try'} | _]} = State) ->
    State#state{ indent = Indent + 1};
state('of' = Token, State) ->
    throw({unmatched, Token, State});

state('after', #state{ stack = [{block, Indent, 'receive'} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state('after', #state{ stack = [{block, Indent, 'try'} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state('after' = Token, State) ->
    throw({unmatched, Token, State});

state('catch', #state{ stack = [{block, Indent, 'try'} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state('catch', State) ->
    State;

state('end', #state{ stack = [{block, Indent, _} | Stack] } = State) ->
    State#state{ indent = Indent, stack = Stack };
state('end' = Token, State) ->
    throw({unmatched, Token, State});

state('->', #state{ stack = [{block, Indent, 'when'}] } = State) ->
    State#state{ indent = Indent + 1, stack = [{block, 0, top}] };
state('->', #state{ stack = [{block, Indent, 'when'} | Stack] } = State) ->
    State#state{ indent = Indent + 1, stack = Stack };
state('->', #state{ stack = [{block, Indent, _} | _] } = State) ->
    State#state{ indent = Indent + 2 };
state('->', #state{ indent = 0, stack = [] } = State) ->
    State#state{ indent = 1, stack = [{block, 0, top}] };
state('->', #state{ indent = 0, stack = [macro] } = State) ->
    State#state{ indent = 1 };
state('->' = Token, State) ->
    throw({malformed, Token, State});

state('|', #state{ stack = [{'[', Indent}] } = State) ->
    State#state{ indent = Indent + 1 };
state('||', #state{ stack = [{'[', Indent}] } = State) ->
    State#state{ indent = Indent + 1 };
state('<-', #state{ stack = [{'[', Indent}] } = State) ->
    State#state{ indent = Indent + 2 };

state('=>', #state{ stack = [{'{', Indent} | _] } = State) ->
    State#state{ indent = Indent + 2 };
state('=>' = Token, State) ->
    throw({unmatched, Token, State});

%% Required for maps
state(',', #state { stack = [{'{', Indent} | _] } = State) ->
    State#state{ indent = Indent + 1 };

state(';', #state{ stack = [{block, Indent, top}] } = State) ->
    State#state{ indent = Indent, stack = [] };
state(';', #state{ stack = [{block, Indent, _} | _] } = State) ->
    State#state{ indent = Indent + 1 };
state(';' = Token, State) ->
    throw({unmatched, Token, State});

state(dot, #state{ stack = [macro] } = State) ->
    State#state{ indent = 0, type = false, stack = [] };
state(dot, #state{ stack = [{block, Indent, top} | Stack] } = State ) ->
    State#state{ indent = Indent, stack = Stack };
state(dot = Token, State) ->
    throw({unmatched, Token, State});

state(_, State) ->
    State.
